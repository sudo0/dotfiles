[[plugins]]
repo = 'Shougo/dein.vim'

#colorscheme start
[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'herrbischoff/cobalt2.vim'

[[plugins]]
repo = 'nightsense/stellarized'

[[plugins]]
repo = 'nightsense/nemo'

[[plugins]]
repo = 'ayu-theme/ayu-vim'
# colorscheme end

[[plugins]]
repo = 'itchyny/lightline.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'

#linting and formatting
[[plugins]]
repo = 'w0rp/ale'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

# git(display changes)
[[plugins]]
repo = 'tpope/vim-fugitive'

# display match count
[[plugins]]
repo = 'osyo-manga/vim-anzu'

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'kana/vim-submode'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    nnoremap <silent><leader>t :NERDTreeToggle<CR>
    let g:NERDTreeShowBookmarks=1
    let g:NERDTreeShowHidden=1
    let g:NERDTreeChDirMode=2
    let g:NERDTreeDirArrowExpandable = "\uf07b "
    let g:NERDTreeDirArrowCollapsible = "\uf07c "

    augroup nerdTreeGroup
        autocmd!
        autocmd StdinReadPre * let s:std_in=1
        autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
    augroup END
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'mechatroner/rainbow_csv'

[[plugins]]
repo = 'kshenoy/vim-signature'

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
    nnoremap tjo :TagbarToggle<CR>
'''

[[plugins]]
repo = 'deoplete-plugins/deoplete-tag'

[[plugins]]
repo = 'haya14busa/vim-asterisk'

[[plugins]]
repo = 'junegunn/fzf'
build = 'bash ./install --all'

[[plugins]]
repo = 'junegunn/fzf.vim'

[[plugins]]
repo = 'lilydjwg/colorizer'
hook_add = '''
    let g:colorizer_maxlines = 500
	let g:colorizer_nomap = 1
'''

[[plugins]]
repo = 'markonm/traces.vim'

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
    let g:lsp_async_completion = 1
    let g:lsp_diagnostics_enabled = 1
    let g:lsp_signs_enabled = 1
    let g:lsp_diagnostics_echo_cursor = 1
    let g:lsp_virtual_text_enabled = 0
    let g:lsp_highlights_enabled = 0
    let g:lsp_textprop_enabled = 1
    let g:lsp_signs_error = {'text': 'x'}
    let g:lsp_signs_warning = {'text': '!'}

    if executable('clangd')
        augroup lspCppGroup
            autocmd!
            autocmd User lsp_setup call lsp#register_server({
                \ 'name': 'clangd',
                \ 'cmd': {server_info->['clangd', '-background-index']},
                \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp', 'cmake'],
            \ })
            autocmd FileType c,cpp,objc,objcpp,cmake setlocal omnifunc=lsp#complete
        augroup END
    endif
    nnoremap <C-l>d :LspDefinition<CR>
    nnoremap <C-l>f :LspDocumentFormat<CR>
    nnoremap <C-l>h :LspHover<CR>
    nnoremap <C-l>r :LspReferences<CR>

    let s:pyls_path = fnamemodify(g:python3_host_prog, ':h') . '/' . 'pyls'
    if executable(s:pyls_path)
        augroup lspPythonGroup
            autocmd!
            autocmd User lsp_setup call lsp#register_server({
                \ 'name': 'pyls',
                \ 'cmd': {server_info->[s:pyls_path]},
                \ 'whitelist': ['python'],
            \ })
            autocmd FileType python setlocal omnifunc=lsp#complete
        augroup END
    endif

    if executable('bash-language-server')
        augroup lspBashGroup
            autocmd!
            autocmd User lsp_setup call lsp#register_server({
                \ 'name': 'bash-lang-server',
                \ 'cmd': {server_info->[&shell, &shellcmdflag, 'bash-language-server start']},
                \ 'whitelist': ['sh'],
                \ })
            autocmd FileType sh setlocal omnifunc=lsp#complete
        augroup END
    endif

    if executable('vim-language-server')
        augroup lspVimGroup
            autocmd!
            autocmd User lsp_setup call lsp#register_server({
                \ 'name': 'vim-lang-server',
                \ 'cmd': {server_info->['vim-language-server', '--stdio']},
                \ 'whitelist': ['vim'],
                \ })
            autocmd FileType vim setlocal omnifunc=lsp#complete
        augroup END
    endif

    if executable('typescript-language-server')
        augroup lspTsGroup
            autocmd!
            autocmd User lsp_setup call lsp#register_server({
                \ 'name': 'typescript-lang-server',
                \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
                \ 'whitelist': ['javascript', 'javascript.jsx', 'javascriptreact', 'typescript', 'typescript.tsx'],
                \ })
            autocmd FileType typescript setlocal omnifunc=lsp#complete
        augroup END
    endif
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
hook_add = '''
    inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
    inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
    inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"
    imap <C-Space> <Plug>(asyncomplete_force_refresh)
    let g:asyncomplete_auto_popup = 1
    autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-neosnippet.vim'
hook_add = '''
    augroup asynCompNeosnipGroup
        autocmd!
        autocmd User lsp_setup call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
            \ 'name': 'neosnippet',
            \ 'whitelist': ['*'],
            \ 'completor': function('asyncomplete#sources#neosnippet#completor'),
        \ }))
    augroup END
'''

[[plugins]]
repo = 'lighttiger2505/deoplete-vim-lsp'
depends = ['deoplete.nvim']

[[plugins]]
repo = 'osyo-manga/vim-precious'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

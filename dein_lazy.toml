[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_source = '''
    let g:deoplete#enable_at_startup = 1

    " tabで候補選択
    inoremap <expr><tab> pumvisible() ? "\<C-n>" :
        \ neosnippet#expandable_or_jumpable() ?
        \   "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"

    " 補完候補が出ていたら確定、なければ改行
    inoremap <expr><CR> pumvisible() ?
    \   deoplete#mappings#close_popup() : "<CR>"

    let g:deoplete#auto_complete_delay = 0
    let g:deoplete#enable_camel_case = 0
    let g:deoplete#enable_ignore_case = 0
    let g:deoplete#enable_refresh_always = 0
    let g:deoplete#enable_smart_case = 1
    let g:deoplete#file#enable_buffer_path = 1
    let g:deoplete#max_list = 10000
    let g:deoplete#auto_complete_start_length = 1

    " マルチカーソル使用時は補完機能をオフにする
    function! Multiple_cursors_before()
        let b:deoplete_disable_auto_complete = 1
    endfunction
    function! Multiple_cursors_after()
        let b:deoplete_disable_auto_complete = 0
    endfunction
'''
on_i = 1
depends = ['vim-multiple-cursors']

[[plugins]]
repo = 'Shougo/neosnippet'
hook_source = '''
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)
    if has('conceal')
        set conceallevel=2 concealcursor=niv
    endif
'''
on_i = 1
depends = ['neosnippet-snippets']

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_i = 1

[[plugins]]
repo = 'davidhalter/jedi'
on_ft = 'python'

[[plugins]]
repo = 'zchee/deoplete-jedi'
hook_source = '''
    let g:deoplete#sources#jedi#server_timeout = 20
'''
on_ft = 'python'

[[plugins]]
repo = 'Townk/vim-autoclose'
on_i = 1

[[plugins]]
repo = 'lazywei/vim-matlab'
on_ft = 'matlab'

#markdown
[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_source = '''
    let g:vim_markdown_folding_disabled = 1
    let g:vim_markdown_auto_insert_bullets = 0
    let g:vim_markdown_conceal = 0
    let g:vim_markdown_new_list_item_indent = 0
'''
on_ft = 'markdown'

[[plugins]]
repo = 'tyru/open-browser.vim'
on_ft = 'markdown'

[[plugins]]
repo = 'kannokanno/previm'
hook_source = '''
    nnoremap <silent><C-p> :PrevimOpen<CR>
'''
on_ft = 'markdown'
depends = ['vim-markdown', 'open-browser.vim']

[[plugins]]
repo = 'zchee/deoplete-clang'
hook_source = '''
    let g:deoplete#sources#clang#libclang_path = 'C:/Program Files/LLVM/bin/libclang.dll'
    let g:deoplete#sources#clang#clang_header = 'C:/Program Files/LLVM/lib/clang'
    set completeopt-=preview
'''
on_ft = ['c', 'cpp', 'cmake']

[[plugins]]
repo = 'rhysd/vim-clang-format'
hook_source = '''
    function! CCodeCleanup()
        let l:lines="all"
        let g:clang_format_fallback_style = 'Google'
        :pyf C:/Program Files/LLVM/share/clang/clang-format.py
    endfunction
    command! CCodeCleanup call CCodeCleanup()
    autocmd BufWrite *.{c} :CCodeCleanup
    autocmd BufWrite *.{h} :CCodeCleanup
    autocmd BufWrite *.{cpp} :CCodeCleanup
    autocmd BufWrite *.{hpp} :CCodeCleanup
'''
on_ft = ['c', 'cpp', 'cmake']

[[plugins]]
repo = 'prettier/vim-prettier'
build = 'npm install'
on_ft    = ['javascript', 'typescript', 'vue', 'css', 'scss', 'json', 'markdown']
hook_source = '''
  " @formatアノテーションを持ったファイルの自動フォーマットを無効にする
  let g:prettier#autoformat = 0

  " Prettierのパースエラーをquickfixに表示しない
  let g:prettier#quickfix_enabled = 0

  autocmd BufWritePre *.js,*.ts,*.vue,*.css,*.scss,*.json,*.md PrettierAsync
'''
